// Code generated by go-bindata.
// sources:
// scripts/promise.lua
// DO NOT EDIT!

package runloop

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsPromiseLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x6f\xe3\xbc\x11\x3e\x8b\xbf\x62\x90\x1e\xd6\x46\x15\x77\xf3\xb6\xbd\x2c\xe0\x02\x8a\xad\x24\x6a\x6d\xc9\x90\x95\x4d\xd3\x20\x08\x14\x8b\x8a\xd9\x95\x45\x97\xa4\x93\x4d\x17\xdb\xdf\x5e\x0c\x3f\x64\x59\x96\x77\xf7\xf2\x5e\x62\x89\x9c\x8f\x67\x66\x1e\x0e\x47\x39\x3f\x7f\x78\x20\xd9\x9a\xc2\x3c\xca\x60\xc6\x56\xb4\x96\x14\x06\xf3\x28\x1b\x12\x32\xe1\xdb\x77\xc1\x5e\xd6\x0a\x06\xab\x21\xfc\xf6\xf1\xe2\xaf\xb0\xa4\xe2\x85\xc2\xbf\x72\xa6\x24\x7d\x25\x64\x41\xc5\x86\x49\xc9\x78\x0d\x4c\xc2\x9a\x0a\xfa\xfc\x0e\x2f\x22\xaf\x15\x2d\x7c\x28\x05\xa5\xc0\x4b\x58\xad\x73\xf1\x42\x7d\x50\x1c\xf2\xfa\x1d\xb6\x54\x48\x5e\x03\x7f\x56\x39\xab\x59\xfd\x02\x39\xac\xf8\xf6\x9d\xf0\x12\xd4\x9a\x49\x90\xbc\x54\x6f\xb9\xa0\x90\xd7\x05\xe4\x52\xf2\x15\xcb\x15\x2d\xa0\xe0\xab\xdd\x86\xd6\x2a\x57\xe8\xaf\x64\x15\x95\x30\x50\x6b\x0a\x67\x4b\xab\x71\x36\xd4\x4e\x0a\x9a\x57\x84\xd5\x80\x7b\x6e\x0b\xde\x98\x5a\xf3\x9d\x02\x41\xa5\x12\x6c\x85\x36\x7c\x60\xf5\xaa\xda\x15\x88\xc1\x6d\x57\x6c\xc3\xac\x07\x54\xd7\xe1\x4b\xa2\x38\xec\x24\xf5\x35\x4e\x1f\x36\xbc\x60\x25\xfe\x52\x1d\xd6\x76\xf7\x5c\x31\xb9\xf6\xa1\x60\x68\xfa\x79\xa7\xa8\x0f\x12\x17\x75\x36\x7d\x8c\xe3\x4f\x5c\x80\xa4\x55\x45\x56\x7c\xcb\xa8\x04\x1d\xeb\x1e\x9d\x96\x41\xe8\x5b\x4c\xa8\xb2\x29\x92\xb8\xf2\xb6\xe6\x9b\xc3\x48\x98\x24\xe5\x4e\xd4\x4c\xae\xa9\xd6\x29\x38\x48\xae\x3d\xfe\x9b\xae\x14\xae\xa0\x78\xc9\xab\x8a\xbf\x61\x68\x2b\x5e\x17\x0c\x23\x92\x9f\x88\x2e\x75\xfe\xcc\x5f\xa9\x8e\xc5\x54\xb7\xe6\x8a\xad\x4c\xba\x75\x01\xb6\xfb\xaa\xda\x2d\xb9\xce\xab\x0a\x9e\xa9\x4d\x18\x2d\x80\xd5\x90\xb7\xc2\x11\xe8\x5e\xaa\xbc\x56\x2c\xaf\x60\xcb\x85\xf6\xd7\x0d\x73\x44\x48\x76\x13\xc2\x32\xb9\xca\xee\x82\x34\x84\x68\x09\x8b\x34\xf9\x1c\x4d\xc3\x29\x9c\x05\x4b\x88\x96\x67\x3e\xdc\x45\xd9\x4d\x72\x9b\xc1\x5d\x90\xa6\x41\x9c\xdd\x43\x72\x05\x41\x7c\x0f\xff\x88\xe2\xa9\x0f\xe1\x3f\x17\x69\xb8\x5c\x42\x92\x92\x68\xbe\x98\x45\xe1\xd4\x87\x28\x9e\xcc\x6e\xa7\x51\x7c\x0d\x97\xb7\x19\xc4\x49\x06\xb3\x68\x1e\x65\xe1\x14\xb2\x04\xd0\xa1\x35\x15\x85\x4b\x34\x36\x0f\xd3\xc9\x4d\x10\x67\xc1\x65\x34\x8b\xb2\x7b\x9f\x5c\x45\x59\x8c\x36\xaf\x92\x14\x02\x58\x04\x69\x16\x4d\x6e\x67\x41\x0a\x8b\xdb\x74\x91\x2c\x43\x08\xe2\x29\xc4\x49\x1c\xc5\x57\x69\x14\x5f\x87\xf3\x30\xce\x46\x10\xc5\x10\x27\x10\x7e\x0e\xe3\x0c\x96\x37\xc1\x6c\x86\xae\x48\x70\x9b\xdd\x24\x29\xe2\x83\x49\xb2\xb8\x4f\xa3\xeb\x9b\x0c\x6e\x92\xd9\x34\x4c\x97\x70\x19\xc2\x2c\x0a\x2e\x67\xa1\x71\x15\xdf\xc3\x64\x16\x44\x73\x1f\xa6\xc1\x3c\xb8\x0e\xb5\x56\x92\xdd\x84\x29\x41\x31\x83\x0e\xee\x6e\x42\x5c\x42\x7f\x41\x0c\xc1\x24\x8b\x92\x18\xc3\x98\x24\x71\x96\x06\x93\xcc\x87\x2c\x49\xb3\x46\xf5\x2e\x5a\x86\x3e\x04\x69\xb4\xc4\x84\x5c\xa5\xc9\xdc\x27\x98\xce\xe4\x0a\x45\xa2\x18\xf5\xe2\xd0\x58\xc1\x54\xc3\x41\x45\x92\x54\xbf\xdf\x2e\xc3\xc6\x20\x4c\xc3\x60\x16\xc5\xd7\x4b\x54\xc6\x10\x9d\xf0\x88\x3c\x3e\x9e\x9f\x93\x8a\xaf\xf2\x0a\xe6\x30\x86\x6f\xdf\x89\x7d\x2b\x68\x49\x85\xa0\x85\x59\x74\x6f\xa3\xa7\x27\x56\x17\xf4\x2b\x8c\x1b\x01\xa7\xb0\x08\x63\x5d\xc0\x31\x7c\xb4\x2b\x69\xb8\x4c\x66\x9f\xcd\xda\x45\xb3\xf6\x77\x44\xae\xd7\x7e\x3b\x90\x0b\xa7\x30\x86\x3f\x1f\x88\xe9\xa5\xbf\x38\x07\xe5\xae\x5e\xd9\xbe\x81\x27\x67\xe0\x00\xf8\x20\x55\xae\xe8\x90\x78\xfa\x17\xc6\xe6\x1d\x19\xed\xcc\x10\xaf\xe4\x02\x98\x0f\x25\xb2\x9e\x6d\x73\x26\x64\xa3\x3f\xfa\xcf\x8e\xee\xe8\x10\x0a\x4e\x3c\x8f\x95\x56\x7b\x3c\xde\xe3\x52\x6b\x5a\x13\xcf\xf3\xca\x4f\x82\x4a\x5e\xbd\xd2\xbd\xee\x6b\x5e\xed\xd0\xb5\x47\x2b\x49\x9d\x0c\x1e\xe2\x3e\x91\xba\x20\xe6\x4f\xb3\x77\x80\x98\xe0\x5e\x37\x58\x26\xdd\xe3\xa0\x1c\x12\xc4\xa7\xde\xb7\x74\x50\x0e\x11\xe1\x07\x95\x3f\x57\xf4\x83\x03\x68\x54\x37\x0a\xc6\xf0\x42\xd5\x86\xaa\x5c\xef\x6b\x45\x4f\x50\xb5\x13\x35\xee\xfe\x6f\x0c\x35\xab\x4c\xb3\x40\x5b\x1b\x35\x7a\x7a\x5a\xe5\x55\x65\x6c\x3a\x7f\x1f\x2c\x58\xab\xd8\x76\xbb\x17\xe9\x83\xbc\x15\x7c\xc3\x24\x6d\x15\xa8\xa6\x5f\x15\xb6\xb7\xd5\x8a\x4a\xe9\x43\x99\xb3\x6a\x87\x2d\xb3\xe6\xb5\x15\x5e\x3d\xb7\x82\x73\x8a\x07\x31\x36\x70\x3b\x89\xed\xca\xb4\x12\x86\x6e\x87\x87\xc9\xc1\x30\x35\xa9\xcb\xdc\x14\xcc\x2c\xf3\x2f\x3e\x50\x21\x60\x0c\xbb\x5a\xe6\x25\x7d\xda\xa2\xe0\xc0\xe0\x3e\x74\xe8\x37\x81\x0e\x5e\x31\xaf\x88\xda\x5a\x45\x4f\x60\xd3\xa5\x53\xe7\x79\x8d\x3f\x25\x76\x9a\x1f\x87\xc6\x60\x0c\xaf\xb8\x6a\x53\x33\xb0\x34\xf9\x5d\x7c\xd8\xac\x3b\x1f\x43\xc3\xf6\x9a\x2b\xe0\x5f\x74\xe6\xf0\xb1\xe5\xa5\xd7\x12\x15\xa2\xc7\x16\x71\xf4\x6f\x17\x14\x37\x71\xaf\x8f\x22\x25\x13\xad\x32\x13\x5b\x05\x4c\xf7\x31\x0b\x7a\xea\x6c\xe1\xa1\x7c\xab\x13\x19\xc1\x91\xb1\xa2\x51\x9d\x62\x62\x93\x5d\xc4\x7f\x74\x18\x9b\xbe\x45\x3c\xaf\x0b\xf4\xb0\x38\x27\xd4\x6d\x8b\xfb\x25\x75\xc7\xbf\xe6\xf1\xd5\xd4\xa5\x6b\xb6\x05\xab\x4b\xf3\xbd\xa8\x61\x51\x43\x79\x0f\x69\xfd\xda\x25\x75\x57\xbc\x4b\x70\xd7\xcd\x4e\x80\x70\xfd\xfb\x14\x08\x4b\x8d\x5f\x05\xd1\xf4\x82\x63\x10\x98\x06\xfe\xa5\xb1\xf3\xe3\x42\x99\x82\xeb\xbf\xc4\x69\xda\x46\xe7\x0c\x9c\x32\x77\x70\x4a\x5c\x1f\x3f\xb1\xed\xba\x61\xe7\x0e\x1a\xf6\x21\xe8\x5a\xd8\x33\xf5\xf4\xf9\x3a\x48\x12\x15\x82\x0b\x1f\x3e\x98\x5b\x07\x07\x41\x4b\x68\x3d\xeb\x02\x4e\xf0\x55\xf9\x41\xfb\x3e\x0d\xcb\x05\xf4\x4b\x67\x01\x19\xdb\xb9\x5c\xdd\x2d\xe8\x42\x6c\x69\xb8\x7b\xb7\x4f\x6d\xbf\x77\xcc\xf9\x1e\xf1\x9f\xd1\xbd\x8b\xa2\x7d\x9f\x0e\x7b\x5b\x4c\xf7\xaa\xb6\x90\x7c\x70\xfc\xea\xe5\xf7\x47\x57\x9a\xe3\xf2\xe3\x6f\xdf\x79\x37\x77\x77\xef\x59\x6f\x2e\xcf\x66\x58\xd2\x48\xcf\xcf\xc9\xf9\x39\x2c\x6e\x2f\x67\xd1\x04\x82\x45\x84\x0b\x0d\x6e\x27\xda\xcc\x1a\x0e\xaf\x35\xe5\x96\xb1\xf6\xfe\x3e\x4b\x4d\x5c\xda\x43\x9f\x35\x3d\x95\xfc\xc4\x98\x3d\xdc\x27\x8c\xcd\x47\x35\x7d\x1b\xf0\xad\xfe\x32\x30\x19\x6c\x75\x00\xb7\x7e\x78\xe1\xe2\xbd\x64\xf4\x86\x3f\xbb\x6d\xad\x01\x1f\x3a\x77\x53\x73\x58\x5c\x10\x54\x88\xa6\xfe\x4d\x86\x6d\xc2\xad\x11\x18\x83\x7b\xe2\x02\x27\x58\x07\x87\x78\x7a\xa4\xdd\xdf\x1e\x7b\x36\xeb\x1c\x74\x87\x14\x4d\xb8\xfd\xf5\xd4\x44\xf3\xcd\x0a\x22\x01\x3a\x2a\x7a\xba\xb0\x5d\x8d\x7e\x55\xb4\x2e\xf6\x68\x46\x66\xe1\xbb\xeb\x6f\x47\x84\x6f\x8d\x9b\x1a\xe1\x7e\xe4\x6c\x35\x46\xd7\x9e\xbb\x7d\xb9\x47\xd9\xcc\xa2\x1d\x5d\x2d\xa0\xef\xd2\x11\xab\x25\x15\x28\xa1\xa7\x60\xd3\x14\x5a\xdd\xcc\xa5\xd7\x5c\xaa\xfa\x2c\x13\xaf\x19\xb4\x3f\xe2\x8b\x56\xd4\x9f\x09\x7a\xab\x49\x8b\x8b\xd8\xa5\x87\x34\x63\x43\x6b\xd3\x25\x8a\x78\xdf\x4d\x65\x64\x7b\x70\x6d\x35\x86\x53\x74\xb3\x09\x6d\x58\x77\xb8\x3c\x38\x3a\x88\x47\x94\x46\xe6\xe5\xe2\x45\x36\x53\xc8\x01\x63\x59\x09\x7f\xc0\xdd\x83\xde\xe0\x6c\x35\xb5\xf9\xf6\xdd\xb9\xb1\x23\x38\x55\x6b\x8e\x76\xce\xac\xc4\x99\xdb\xd9\xd2\x5a\xff\xb3\x62\x6c\xcc\xba\x65\x41\xe5\xae\x52\xd2\x7e\x81\x79\x9d\x56\x26\xdf\xeb\xd5\x5a\xf0\x9a\xfd\x97\x8a\x01\xf3\xdd\xa9\x2d\x5a\x63\xfd\x7e\x5e\x6c\x0a\x6d\x6d\x3e\xb0\xc7\x56\xf7\x72\xc7\xca\x99\xd8\xf3\xa5\x8d\x19\x49\x73\xd6\x22\xc1\x1e\xb5\x7b\x3a\x87\x0b\x6b\xad\xd9\x6b\x25\xc8\xf3\x8a\x07\x63\xef\x11\x6b\x68\x91\xf4\xd0\xca\xc1\x6a\x3e\x8d\xec\x97\x1a\x7e\x31\xfa\x8d\x69\xfd\x65\x86\xe9\x7a\x60\x8f\x9f\x90\x89\x83\x6e\x46\x70\xf2\x1d\xfa\x47\x89\xd2\x43\xfe\xf0\xa7\x14\xd8\xe4\x5b\x4d\x01\x1f\xca\xba\x9f\x06\x3d\x55\xea\x16\xa9\xe0\x1a\x19\xb3\xbd\x8b\xc1\xdf\x2c\x73\xda\xed\xcb\xd0\xa5\x95\x8f\xe6\xb3\xb1\x1e\xd8\x00\x87\x26\xc2\xa6\xa0\x82\x9a\xc4\x1d\x9e\x57\x6b\x42\xe7\xd6\x6c\x3b\xff\x7f\xbc\xe8\xb9\x75\x6d\xc7\x3c\xee\xa1\xdd\xbb\x94\x38\x3b\x17\xc3\x1f\x24\xac\x64\x42\xaa\x1f\x9c\x1a\xac\xe1\x13\x4e\x7d\xfb\xaf\x6d\x2d\x6c\x2a\xf9\x7a\x22\xc2\x83\x04\x1d\x7f\x09\x39\xc4\x3d\xd7\x40\x7f\x85\xed\xdb\xfc\xff\x01\x00\x00\xff\xff\x34\x54\x94\xdb\x21\x15\x00\x00")

func scriptsPromiseLuaBytes() ([]byte, error) {
	return bindataRead(
		_scriptsPromiseLua,
		"scripts/promise.lua",
	)
}

func scriptsPromiseLua() (*asset, error) {
	bytes, err := scriptsPromiseLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/promise.lua", size: 5409, mode: os.FileMode(420), modTime: time.Unix(1500049989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/promise.lua": scriptsPromiseLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"promise.lua": &bintree{scriptsPromiseLua, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// scripts/inspect.lua
// scripts/prelude.lua
// DO NOT EDIT!

package goluaext

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsInspectLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x3a\xed\x72\x1a\xcb\x72\xff\x79\x8a\x2e\x1c\x67\x21\x77\xc1\xd2\x75\x3e\x2a\xae\x83\xab\x38\xd2\xca\x22\x96\x41\x01\x6c\xc7\x85\x88\x6a\xd8\x9d\x65\x27\x2c\x3b\x7b\x66\x66\xd1\x21\x2e\xdd\x37\xca\x53\xe4\xc5\x52\x3d\x1f\xfb\x01\x2b\xdd\x4a\x9d\xab\x1f\x92\xa6\xa7\xbb\xa7\xbf\xbb\x67\x20\xe5\x21\x49\x81\x65\x32\xa7\xa1\x82\xd1\xcf\x0e\xc0\xe3\xb7\x60\xbe\x98\xcc\xa6\x30\x02\xcf\x6e\x0c\xd3\x82\xc0\xfb\xe1\xe5\xf0\xc2\xf3\x11\xe3\xeb\xfc\x0e\xf0\x67\x04\x5e\xa2\x54\xfe\xe1\xdd\xbb\x2d\x53\x49\xb1\x19\x86\x7c\xff\x6e\xc7\x76\x4c\xf1\x77\x35\x52\x43\x74\x1d\x2c\xae\xe6\x93\xfb\xa5\x65\x9d\x14\x7b\x92\x0d\x04\x25\x11\xd9\xa4\x14\x04\xcd\x05\x95\x34\x53\x44\x31\x9e\x49\xe0\x31\x28\xdc\x90\x86\xf8\x6e\x72\x15\x4c\x17\x01\x8c\x60\xb5\xea\xe0\xd1\x5f\x26\x4b\xb0\xc0\x8e\x06\x5c\xf1\xfc\x28\xd8\x36\x51\xd0\x0b\xfb\xf0\xe7\x8b\xcb\xf7\x10\x64\x82\xfd\x56\x50\xf8\x44\x44\xf8\xbf\xff\x43\xe0\x8a\x2b\x62\x90\xef\xa9\xd8\x33\x29\x19\xcf\x80\x49\x48\xa8\xa0\x9b\x23\x6c\x05\xc9\x14\x8d\x7c\x88\x05\xa5\x28\x40\x98\x10\xb1\xa5\x3e\x28\x0e\x24\x3b\x42\x4e\x85\xe4\x19\xf0\x8d\x22\x2c\x63\xd9\x16\x88\xe6\x15\xf2\xfc\xa8\xc5\x4d\x98\x04\xc9\x63\xf5\x44\x04\x05\x92\x45\x40\xa4\xe4\x21\x23\x8a\x46\x10\xf1\xb0\xd8\x3b\xed\x20\x66\x29\x95\xd0\x53\x09\xd5\x1c\xba\x0b\x4b\xd5\xed\xeb\xc3\x22\xaa\x7d\x02\x2a\xa1\xe0\xb6\xe0\x89\xa9\x84\x17\x0a\x04\x95\x4a\xb0\x10\xf9\xf8\xc0\xb2\x30\x2d\x22\x96\x6d\x35\x1f\x87\x92\xb2\x3d\xb3\x27\x21\x0b\x6d\x15\x89\x8c\x0b\x49\x7d\x2d\xaf\x0f\x7b\x1e\xb1\x18\xff\x52\xad\x62\x5e\x6c\x52\x26\x13\x5f\xf3\x89\x18\x1e\xb1\x29\x14\xf5\x41\xe2\x46\x48\x33\xa4\x24\x59\xf4\x8e\x0b\x90\x34\x4d\x91\x0b\xa3\xc6\x4d\x35\x29\x35\x0e\x28\xae\xd9\xe4\x68\x64\x65\xcd\xa6\xcf\x7f\x4a\xf8\xbe\xa9\x15\x93\x10\x17\x22\x63\x32\xa1\x91\x56\x9d\x83\xe4\xfa\xd4\xff\xc2\x80\xb4\x9c\x90\x24\xe6\x69\xca\x9f\xd0\xec\x21\xcf\x22\xa6\xa3\xe4\x83\xf1\xe6\x32\xa1\x40\x36\xfc\x40\xb5\x6e\x26\x08\x32\xae\x58\x68\xdc\xa0\x1d\x93\x57\x1e\xb7\x5b\x32\x21\x69\x0a\x1b\x6a\x8d\x48\x23\xcd\x8b\x65\x40\x6a\xea\x09\x14\x45\x2a\x92\x29\x46\x52\xc8\xb9\xa8\xa2\xb3\xa6\xc6\xd0\xca\x71\x1b\xc0\x62\x76\xb3\xfc\x3e\x9e\x07\x30\x59\xc0\xfd\x7c\xf6\x6d\x72\x1d\x5c\x43\x77\xbc\x80\xc9\xa2\xeb\xc3\xf7\xc9\xf2\x76\xf6\x75\x09\xdf\xc7\xf3\xf9\x78\xba\xfc\x01\xb3\x1b\x18\x4f\x7f\xc0\xe7\xc9\xf4\xda\x87\xe0\x3f\xee\xe7\xc1\x62\xa1\x79\xcd\xe6\x30\xf9\x72\x7f\x37\x09\xae\x7d\x98\x4c\xaf\xee\xbe\x5e\x4f\xa6\x9f\xe0\xd7\xaf\x4b\x98\xce\x30\xf2\xbf\x4c\x96\xc1\x35\x2c\x67\xfa\x50\xcb\x6e\x12\x2c\x60\x76\x63\xd2\x23\x98\x5f\xdd\x8e\xa7\xcb\xf1\xaf\x93\xbb\xc9\xf2\x87\x0f\x37\x93\xe5\x34\x58\x2c\xe0\x66\x36\x87\x31\xdc\x8f\xe7\xcb\xc9\xd5\xd7\xbb\xf1\x1c\xee\xbf\xce\xef\x67\x8b\x00\xc6\xd3\x6b\x98\xce\xa6\x93\xe9\xcd\x7c\x32\xfd\x14\x7c\x09\xa6\xcb\xa1\x66\x35\x99\xc2\x74\x06\xc1\xb7\x60\xba\x84\xc5\xed\xf8\xee\x4e\x1f\x39\xfe\xba\xbc\x9d\xcd\x17\x28\xe7\xd5\xec\xfe\xc7\x7c\xf2\xe9\x76\x09\xb7\xb3\xbb\xeb\x60\xbe\x80\x5f\x03\xb8\x9b\x8c\x7f\xbd\x0b\xcc\x71\xd3\x1f\x26\x43\xef\xc6\x93\x2f\x3e\x5c\x8f\xbf\x8c\x3f\x05\x9a\x72\xb6\xbc\x0d\xe6\x1a\xd5\x4a\xf9\xfd\x36\xd0\xa0\xc9\x14\xc6\x53\x18\x5f\xe9\x62\x31\xbb\x81\xab\xd9\x74\x39\x1f\x5f\x2d\x4d\x7c\x2e\x67\xf3\x65\x49\xfe\x7d\xb2\x08\x7c\x18\xcf\x27\x0b\x34\xd0\xcd\x7c\xf6\xc5\x07\x34\xf1\xec\x46\xdb\x70\x8a\xb4\xd3\xc0\x70\x42\xf3\xa3\xf4\x9a\x4b\xe9\xa9\xd9\x5c\x6b\xf4\x75\x11\x54\x32\x5d\x07\xe3\xbb\xc9\xf4\xd3\x02\x19\xd4\xdd\x8a\x26\x59\xaf\x3b\xcf\x9d\x8e\xa9\x9c\x8a\x63\xaa\x64\x5b\x18\x95\xff\x76\x3a\xae\xf4\x7d\x0e\x7e\x00\xd8\x42\x29\xa9\xda\x53\x45\x74\x4d\xeb\xfd\x7c\xf6\xe1\xe7\xe3\x63\x8d\x38\x2e\x32\x9d\xd2\xbd\x3e\x08\xaa\x0a\x91\x55\xb5\xf7\x73\xf0\xc3\x03\x9a\x45\xcf\xfd\x92\xf1\x97\x60\x39\x5e\x6a\xfb\xfe\x11\xc6\x25\x17\xc7\xbe\x33\x18\xc0\x38\x47\x5a\x9e\x27\xec\xbf\xa9\xd4\x41\x6e\x59\xb1\x18\x98\x82\x84\x48\xf8\xad\xe0\x8a\x4a\x1f\x36\x85\x4e\x33\x20\x79\x62\x69\xa8\x44\x16\x33\x95\x50\xf1\xc4\xb0\x62\x30\x65\x4f\x95\x40\x40\xd0\x6d\x91\x12\x61\xe8\x23\xcb\xd7\xda\xd1\x89\x09\x72\x4f\x84\xfa\x77\xc4\xe8\x49\x25\xfa\x1d\xc0\x83\xa5\x12\x1f\xf6\x44\x85\x49\xcf\xeb\x7a\x7d\x9d\xd4\x78\x70\x05\xee\x7a\xdd\x3e\x0a\x9b\x69\xcf\x5a\x45\xbb\x5e\x17\x86\x43\xc4\xc2\x3f\x5d\xaf\xdb\x01\x54\xb4\x53\x22\x78\x5d\xcf\x22\x7c\xd8\xca\x62\x83\xcc\x7d\xf0\x1e\x1e\xf0\x8c\xe1\x10\xb7\x3b\x88\x8f\x3a\x3d\x10\x18\x7d\xc4\x3d\xe2\xf9\xf0\x70\x61\x17\x17\x9e\x0f\xef\x2f\xcd\xe2\xfd\xa5\x67\x75\x91\x09\x17\xea\x8a\x67\x4a\xf0\xf4\x2a\x21\x22\x90\x21\xc9\xa9\x84\x11\x60\x7b\x5d\x75\x1f\x48\x77\x0d\x23\xe8\x3e\x3c\x90\xae\xaf\x01\x1b\x07\xd8\x74\x7d\x5c\xc7\x6e\x1d\x9b\x75\xe6\xd6\x59\xd7\x37\x2c\x84\x83\x08\xcb\x42\x39\x80\x32\x24\x07\xb7\x3e\x74\x3b\xcf\x56\xb0\x94\x67\xdb\x76\xb9\x9e\xa1\xd4\x31\x63\xa9\xd3\xf0\xe1\xe2\xe2\xc2\x29\xf8\x70\xf1\xfe\xb2\x13\x73\x01\x6c\x64\x60\x11\x96\x66\xc3\x37\x4c\x30\x0e\xb5\x3b\x87\xd8\x33\x7b\xcc\xfa\x4d\x3b\xa9\xdd\x1a\xab\x30\x59\x57\x1e\x7b\x0d\x49\x6b\xd1\x1d\x0e\x99\xc6\x6c\xd7\x41\x23\x56\x42\xc4\x5c\xec\x89\xea\x75\x1f\x1e\xde\x5e\xbc\x8f\xba\x3e\x68\x81\xd0\x97\xda\x9f\x27\x21\x47\x35\x0f\x17\x6e\x36\x36\x7a\x65\x54\xe0\xe9\x3e\xca\xf0\xf0\xd0\xed\x77\xa0\xfe\x63\x11\x7a\x6f\xc3\xfe\xdb\x78\x75\x31\xf8\xd7\x75\xd7\x7f\x41\xc2\x76\xca\xb7\x61\xd7\x7f\x49\xf9\x7e\xbf\x55\x5a\x26\x27\x11\xcd\x14\x8b\x19\x15\x27\x32\xab\xa3\x55\x03\x46\x23\xf0\x8c\x2d\x3c\x9d\x2d\x55\xa6\x40\xf7\x3f\x57\x8f\x6f\xc9\x1a\x7f\xbd\x8d\xd6\xff\xf0\x77\x5d\x78\xe9\x9c\x05\xfd\xad\xa0\x59\x48\x3f\xd3\x63\x6f\xe7\x83\xb4\xcb\x3b\x9a\x6d\x55\x72\x7a\xec\xce\x1c\x9a\x15\xfb\x0d\x15\x9e\x51\x16\x4f\xbe\x84\x5f\x46\xb0\xab\xd6\x3b\x5c\x37\x59\x55\x9b\x7b\xa2\x92\x61\x9c\x72\x2e\x2c\xbf\x5d\x5d\xb4\x88\xc6\xa4\x48\xd5\xf2\x98\xd3\x99\x88\xa8\x28\x33\xca\x9d\xba\xd6\x95\xf6\xd2\x87\x95\xb7\xe1\x3c\xa5\x24\xf3\x74\x54\xfc\x19\x21\xd6\x1c\x18\x4f\xef\x71\xad\x0b\xa6\x5e\xfe\xa3\xce\x29\xcf\x69\xae\x61\xff\x84\x28\x85\xa4\x22\x22\x8a\x68\xc8\x3f\x6b\xa2\x04\x07\x56\xbd\xfe\x97\xaa\x09\x54\xc5\x8b\x0b\xf5\x99\x1e\x65\x8f\xf8\xb0\xe9\x97\xf9\xa1\x88\x0f\x6a\x83\x2d\x02\x2d\x45\x70\xc8\xc3\x7f\x36\x7d\x1c\x1b\x06\x03\x1b\xb5\xd2\xd4\x35\xad\x8a\x04\x1c\x8e\x90\x1d\xd5\x20\x2a\x58\x48\xd2\xf4\xf8\x8e\xa4\x79\x42\x36\x54\x99\xa5\xc9\x32\x45\xd0\x54\x6a\xa3\xe9\x7b\x66\x55\x7a\x9f\x0b\xbb\xef\x8c\x64\xea\xa4\xf3\x1d\x81\x5f\x60\xa3\x33\xa3\x94\x36\x42\x71\x23\x2d\xef\x99\xc5\x57\x8a\xac\xfd\x36\xf0\x66\x6d\x54\x59\x3e\x71\xb7\xad\x95\x34\x8a\x84\x7c\x9f\x13\x41\x23\x20\x61\xc8\x05\xce\xab\x38\xeb\x61\x73\x39\xf7\xa9\xf6\x8b\x51\x2c\x52\x44\xeb\x84\xc2\xd4\x85\x6e\x15\x0b\x7e\x79\x51\x2e\x9a\x4a\x6a\xd9\xd9\x69\xb2\x64\xa5\x44\x41\xb5\xe0\x4d\xa1\x37\x34\xe6\x28\x77\x21\x15\xdf\x03\xcf\xa8\xac\xb3\xd9\x9c\xb1\x89\x49\x2a\x29\xb2\xb1\x14\x56\xf5\x58\x51\x51\x72\x76\x5c\x8c\xad\xcf\x70\x2b\x7f\xe3\x08\x7f\xe6\x67\x27\x2f\x3a\x4c\x6d\xca\xbe\x74\x83\x15\x79\x9f\xa7\xb4\xba\x5c\x08\x4a\x70\xde\xf6\xb5\x7d\x37\x34\x21\x07\xc6\x05\x4e\xac\x82\x3c\xa5\x34\x83\xbf\x87\x37\x38\x76\x77\x8b\x2c\xa2\x31\xcb\x68\xd4\x85\x27\xac\xc3\x83\x81\xbd\x71\xa1\x2c\x99\xa7\x20\x2f\x50\x26\x9b\xaa\x72\x08\x0b\x0e\x4f\xb4\x3a\x0d\x78\x21\x80\x3f\x65\xf0\x06\x78\x4e\x05\x51\x5c\x0c\x4f\x13\x62\x4b\xd5\xa2\x91\xeb\x3d\x55\xa5\x05\x0a\x33\x82\xcb\x72\x7d\x80\x11\xca\xb8\xa5\xaa\xa7\xfc\x94\x66\x88\xf9\x94\xb0\x94\xc2\x01\xfe\x32\xc2\xc6\x64\x9a\x0e\x58\x4a\xfc\xfd\x27\x4d\x0f\xad\xb4\x8d\x5e\x8f\xc8\x03\xb8\x6c\x2d\x75\x5b\xaa\xa6\x3c\x33\x82\xe2\x9c\xaf\x53\xb8\x26\xe8\x8e\x1e\x4d\x97\x2c\x21\xcd\x02\x06\xa3\x97\x14\xc5\x86\xb9\xf3\x1f\xf1\x56\x91\x13\x26\x90\xab\xd3\xc1\xb6\xc7\xbf\x56\x66\x4d\x98\x69\xc7\x0c\x59\x26\xa9\x50\x3d\x14\xc7\x87\x5d\xdf\x2a\x68\x7e\x1b\x0c\x8c\x20\xbb\xef\x6a\x51\xad\x50\xdb\x8d\x66\xf1\x7d\xc1\x20\x4b\xbe\xd0\x15\x64\x4e\x65\x91\xaa\x05\x89\x69\x7a\xec\x29\x1f\xf6\x35\xbb\x34\x06\x4d\x5d\xd2\xf6\xca\xb4\x01\x53\x5c\x75\xf2\x5a\xaf\xec\x95\x0f\x5e\x45\xe0\x55\x5c\xa4\x12\x3e\xf0\x9d\xad\x65\xc8\xa5\x42\x33\xdc\xca\xca\x5c\x0d\x0c\x83\x01\x47\x5b\x29\x01\x23\xc8\x31\x47\x6a\x44\x3e\xa8\xbe\x45\x32\x08\x7c\xe7\x9a\x20\x96\x43\x8f\x0a\xc1\xc5\x07\xd0\xb3\x9f\xa3\x71\x9d\x14\x2c\xcf\x8a\x5b\xef\x84\x19\xfe\x1e\x0c\xfe\x1a\x1f\xe3\x14\xa7\x50\x6b\x4f\x7e\x83\x9c\x3e\xc2\x45\xa3\x90\x20\xec\xa5\x39\x25\xe4\x45\xa6\x96\x68\xd9\x71\x9e\x53\x22\x08\xa6\x25\xfa\x44\x9d\xc0\xfa\x2e\x1e\x6a\x30\xf4\xd0\x29\x88\x0b\x8c\xe9\x9a\x9c\x4d\xef\x95\xc6\xb6\xa1\x7a\x4a\xbf\x52\xb5\x09\xee\xfc\x44\xdc\x1e\xd9\xf4\x74\x99\x70\x68\xcb\x04\xf3\x88\xd2\xa6\xdb\xae\x5d\xb7\xd7\x48\x0e\x2f\x93\x18\x9f\xbc\x4c\xba\xad\xdf\xa4\x54\xff\x25\x46\xd8\x06\x5e\x55\xb9\x0d\xea\xea\x54\x95\xb2\xf5\x9a\xde\xc4\xaf\x3b\x3f\xe4\xf9\xd1\x15\x88\xfa\x6d\x4e\x56\xf9\x63\xde\x73\x4c\x49\xc4\xfb\xdf\x1b\x69\x0b\x0f\x1b\x5d\x1a\x78\xc4\x35\xd2\x8a\xa1\x74\x12\xff\x34\x4a\x63\xc9\xa0\x35\xea\xf6\x64\x47\xef\x89\x4a\x7a\x39\x51\x89\x0f\xc3\xe1\xf0\xbc\x30\x0e\x87\xc3\xaa\x36\x66\xf4\xe9\x5e\xa3\x1a\x91\xea\x1a\x68\x1e\xfd\xba\x78\x6f\x34\x0b\x1b\x08\x96\x72\x65\x0a\xbb\x96\x16\xb7\x57\x6c\x7d\x5a\xcd\x2d\x66\xab\xc0\xb9\xe0\x21\x95\x72\x4e\xc3\x42\x48\x76\xa0\x3d\x0b\xc0\xdb\x28\xdd\xfb\x60\xf4\x38\x30\xc9\x14\x8d\xfa\x1d\x17\xe1\xb8\x89\xd1\x8f\x6d\xa6\x9e\x91\xb8\x76\x91\xc3\x62\x47\xb7\x42\xf4\x75\x03\xb1\xb9\x63\x5d\xec\x8c\x62\x65\xa0\x11\xd6\x2b\xf3\x7f\xaf\x12\xa7\xef\xb8\xeb\x2c\x2c\x71\xdb\xb3\xf1\x8c\xe5\x15\xcf\x8f\xae\x3d\xe9\x5e\xd8\x10\x64\xd4\x44\x6c\x67\xf1\x99\x1e\x3b\x2f\x25\x6a\x4d\x9c\x5a\xc2\xd6\x49\xab\x33\x5a\x8c\xbe\xf3\x4f\x43\x68\xe7\x43\xed\x6d\xa3\x5f\xf3\x85\x63\xce\xe2\x26\xff\xbf\x54\x6e\xa9\x5d\xa3\x1a\x7a\xad\xea\x04\xeb\x57\x25\x3a\x9c\x49\x54\xa7\x6d\x93\xa7\xaa\x1c\xa5\x5b\x9d\x09\xf7\x0a\x5e\x3d\xac\x51\x54\x2a\x53\x9e\x89\x70\xf6\x28\x73\x2e\x87\x6c\x65\x75\x65\x9e\x73\x95\xc3\x6a\x89\xb4\x9a\xe7\x9d\x26\x36\x66\x4b\x04\x93\x49\x38\x52\xfe\xe1\x1f\x97\x90\x13\xa3\x11\x17\x26\x36\x4f\x80\x8f\x7b\x85\xf0\xc7\x47\x96\x45\xf4\x77\x18\x55\x3b\xcf\x9d\x4e\x99\xcb\x25\xf0\x43\x5e\x28\xd9\x6b\x14\x1f\x22\xb6\x52\x5f\xf8\x9a\xe5\x67\x53\xc4\x31\xd5\x8d\x9a\xa6\xf1\xd0\xac\x1a\x23\xa7\xa6\x79\x53\x6e\x54\xa5\x48\x33\x7c\x71\xc2\x34\x04\x58\x9b\x30\xba\x10\xb7\xaa\x4b\xda\x78\x2d\x42\x47\xfc\x29\xeb\xc5\x28\xb2\x16\x26\xa5\x07\x9a\x3a\xc9\xcc\xc2\x70\x8f\x7b\xaf\xe1\x94\x63\x6b\xcb\x09\x8a\x6c\x58\x7c\x2c\xc9\x8d\x99\x34\x6d\x46\x9f\x52\x96\x51\xdf\xbd\x89\x08\x9a\x9b\x0d\x34\x78\xa6\xfc\xda\x09\xee\xa5\xa1\x85\x3f\x49\xf1\xc2\x7b\xfc\x66\x22\xb1\x77\xa8\x4d\x93\x86\x59\x24\x57\x87\xb5\x4d\xd0\x17\xb9\x6c\xa9\x9a\x58\x62\xfb\x81\x53\xe4\x54\x34\x0c\xaa\xe7\x22\x16\x55\x69\x6e\x6f\xcf\x07\x37\x5d\x1e\x6c\x9d\x8c\x1a\x4f\x29\x30\x02\xa3\xd8\x9e\xfc\x3e\x89\xe4\x4a\x1d\xd6\x38\xd9\x5c\xf4\x4b\xd7\x9d\xee\x8e\x80\x45\xd5\x86\x55\xc1\x70\x62\xd1\x69\xab\x29\x27\x3b\x16\xbd\x6c\xa6\xbc\x50\x7a\x7c\xb7\xef\x5e\x8d\x37\x9a\x5d\xf3\xc6\x5d\xb9\xa9\x9c\xe0\x2b\x50\x77\xd5\xad\xbb\xf2\x1b\x49\x0b\x6a\xb8\xd6\x70\xd6\xdd\x57\x05\x59\xda\xf9\xc5\xce\x75\xd8\x43\xea\x0f\xd2\x5c\x34\x61\xd5\x5b\x72\xf5\x1a\x57\x9e\x55\x1b\x82\xfb\xd5\x0d\x58\xef\x9f\x44\x86\xea\xb7\xd1\x7b\xbf\xe8\x6a\x05\x9e\x09\x37\x1b\x08\x38\x5b\x79\x1f\xbd\x13\x8e\x36\xda\x3f\xda\xc0\x88\x68\xae\x92\x56\x9e\x3a\xdf\x4b\x6a\xd7\x3a\x35\x51\xdb\xe8\xf5\x11\x2e\x8d\x03\xea\x62\xb5\x0b\x74\xda\xb5\xb3\xd3\x5b\xe1\xe9\xed\xc9\xdc\xfc\x5e\xb8\x3c\xd6\x5b\xc4\x69\xc4\x9e\xcc\x9a\xf5\x70\x6f\x5c\xbc\x4a\xec\xd7\xee\x63\x67\x06\xf2\xfa\x15\xc8\xd4\xa0\xf2\x53\x80\x4e\xd9\x61\x4f\x0e\x6a\x34\xd7\x1a\x33\x18\x0c\xd0\x7d\xf6\x91\xb4\x49\xd4\x6f\xb4\xec\x13\xd3\x7c\x1c\x35\x0c\xef\x2a\xd5\x6b\xcd\x54\xcf\xe5\x30\x82\x8b\xda\x2c\xa2\x6b\xf3\x09\xeb\xda\x1c\xc2\x62\x4b\x55\xde\xa4\x6a\xb2\xfb\x5e\xfd\xb8\xa6\x5a\x5e\xff\x0c\x6c\xd2\x4d\xad\xd8\xfa\xe4\x96\xa1\xc7\x58\xfc\xfb\xa7\xf2\x3e\x53\x93\x1d\xa5\x7c\xf4\x77\x38\x31\x31\x33\x32\x9d\xc5\x4d\xff\x8f\x89\x5c\xab\xf2\x4d\x89\xcb\xa2\x73\xae\xdf\xe8\x35\x0d\x77\xff\x3f\x0d\x59\x8c\x41\xdc\x88\x90\xbf\xa1\x12\x98\x8f\x65\x32\x7c\x7c\x4d\xf0\x6a\xca\x71\xdc\x69\x56\x1b\xe1\xdf\x9c\xd9\x5d\x4b\xc7\x85\x93\x1e\x63\x59\x98\x70\x67\x12\xf6\x45\xaa\xd8\x00\x9b\x64\x34\x84\x7f\x2b\xa4\x62\xf1\x11\xc2\x94\x4b\x96\x6d\xe1\xb9\xf3\x92\xe8\x65\xc9\x6a\x46\xbb\x33\xc3\x60\x00\x44\x08\x72\x74\x8f\x69\x09\x39\x50\xe0\x19\x05\xfa\xbb\x12\x04\x64\x4e\x42\x5a\xbe\x2f\xb6\x1d\xd6\x8c\xcf\xd2\x0b\xb5\x3d\x5b\xfc\x5e\x19\x3c\x4a\x8b\xd5\x7a\x6e\xa3\x8f\xda\xe6\x70\x68\xbc\x4a\xb4\x14\xdb\xda\xc7\x71\xb6\x02\x1c\xfa\xf5\x56\x60\x39\xd8\xb7\x65\xdd\x5c\x0c\xc4\x3d\xc0\xd7\x40\x19\x4b\x5b\xcf\x28\x9b\xcc\xa1\x85\xf3\xe9\xed\xc7\x91\x99\x2e\x77\x68\x74\x81\x66\x81\x57\x07\xdf\x03\xcf\xaf\x95\xf9\x43\xdf\x77\x6d\xc7\xd9\xee\x6f\x32\xef\x56\x9f\x99\xd8\x9e\x6a\xff\xf6\x04\xe7\xca\x07\x9e\xeb\x2f\x0d\xe0\xb9\xf6\x5f\x1b\xdc\xa3\x72\x5d\xbe\xc4\xb8\x4f\x3a\xb0\xf7\xd5\x10\x86\x0e\x82\xb1\x4c\x54\x32\x4c\x8a\x2d\xad\xdf\xb8\x31\x8a\x6b\xe8\x0e\xc2\x05\x78\x0f\x99\x57\xcd\x5d\x7a\xf6\xab\x33\x76\x10\xc4\x04\xa8\x30\xed\xcd\xa0\x86\x69\x21\x36\x74\xdc\x7e\xf5\xa1\x2b\xe7\xea\xd5\x9b\x90\x31\x86\xfe\x84\xfa\xb9\x5f\x3d\x82\x34\xbe\x81\xc4\xc5\xd9\x27\xda\xe6\x1b\x29\x56\xfd\xf2\x67\x64\x40\xbe\x1d\xd6\x71\x70\x68\xec\x5e\xf8\xb5\xa1\xbd\xb1\xf3\xf3\xd9\xb7\x53\xa4\x04\x80\xd6\x2d\x33\x2a\xb6\x6e\x39\xc3\xd6\xb6\xdc\xa0\x6d\xbf\x3e\x62\xcc\x59\xdb\xb7\xf3\xb6\xf9\x22\xcb\xf9\xab\x5c\xfb\x5b\x14\x1a\x0b\x8d\xf4\xec\x37\xae\x4c\x26\x71\xcf\xd3\xdc\xa0\x9f\x3c\x29\x0d\x43\x9e\x85\x44\xf5\x4a\x7c\x7b\x1b\xb2\xd3\x63\xc3\xcc\x16\xc7\x87\x9f\xf0\xf8\x18\x92\x34\xad\x3f\x36\x3d\x9a\x67\x1f\xc7\xfc\x34\xca\xf5\x1e\xcd\x22\x78\xee\x77\x3a\x4d\x9c\xce\xff\x05\x00\x00\xff\xff\xb8\xf5\x99\x1a\x60\x26\x00\x00")

func scriptsInspectLuaBytes() ([]byte, error) {
	return bindataRead(
		_scriptsInspectLua,
		"scripts/inspect.lua",
	)
}

func scriptsInspectLua() (*asset, error) {
	bytes, err := scriptsInspectLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/inspect.lua", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsPreludeLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x54\xc1\x4e\xdc\x30\x10\xbd\xef\x57\x3c\x4e\x2c\x52\x12\xb5\x07\x6e\x84\x4b\xaf\xfd\x83\xaa\x5a\x4d\x9c\x31\x31\x38\xf6\xca\x76\x08\xdb\xaa\xff\x5e\x8d\xed\x2c\x01\x4e\x09\x93\xf7\xde\xbc\x99\x79\xec\xa1\x6d\xa1\x2c\xc5\xd8\xd9\x85\xe4\x8f\x1f\x7e\x3e\x53\x32\x83\x65\xac\x26\x4d\xf8\xb9\x10\xee\xbb\xef\x38\x3a\x9f\x70\xdf\x7d\xbb\xeb\x0e\x7a\x71\x2a\x19\xef\x0a\xf1\x38\x50\xe4\x06\xc6\x99\x74\x77\x00\x60\xbd\x22\x0b\x85\x1e\x7f\xff\x01\x40\xdb\x82\xe0\x78\x2d\x68\x18\x17\x13\x39\xc5\x02\x35\x1a\xa2\x2a\x54\x90\x1b\x91\x2e\x67\xce\x72\x77\xe8\x7b\xdc\x6e\x7d\x6e\x91\x26\x76\x42\x10\x8e\x80\x7b\x08\xaa\x56\xe4\x15\x3d\x9c\xb1\x52\x60\x1b\xd9\xe8\xcf\x52\x89\x06\xcb\x3b\x9d\xb6\x85\x5f\xc2\xde\x56\x04\x21\x4e\x64\xad\x5f\xa1\xfc\xf9\x02\xaf\x05\x5e\xd4\x33\xe6\xa6\xf6\xd3\x3e\xc0\x34\xaf\x30\x0e\x67\x32\x21\xd6\x36\xa3\xaf\xdf\x01\xa8\x5f\xe6\x37\x7a\xbc\xd6\x0a\xbb\xb1\xbe\xa9\xee\x54\xed\x6e\x03\xd4\x6f\x6d\x9b\xbb\x15\x33\xab\xb1\x16\x03\xe7\xca\xcc\x89\xb2\xfb\xdc\x97\xac\x85\x49\x11\x7e\x78\x66\x95\x62\x53\xa9\x79\x79\x13\x5f\x0a\xd3\x7a\xff\x82\xe5\x2c\x15\x13\x44\x60\xf2\xa3\x2c\x1e\x26\x75\x87\x62\xe2\x64\xdc\xc8\x6f\xe8\xa1\x0e\x55\x82\xdf\xce\x3e\x32\x08\xca\xbb\x98\xc2\xa2\x92\x0f\x58\x27\xa3\x26\x28\x72\xe2\x46\x91\xb5\x3c\x62\xb8\xe0\x21\xdb\x74\x34\xf3\xe3\xf1\x81\xc2\x53\x7c\xdc\x5d\x7e\x4e\xf9\xf4\x52\x98\x53\x77\x3a\x09\x0d\x3d\xb6\x63\x1e\x33\xf7\x94\x06\xdb\xa0\xeb\xba\x4c\xac\x4c\x3f\x3c\x5f\xa9\x88\x9c\xae\xa3\x1f\xfd\xf0\xdc\xa8\x02\x35\xba\x44\x60\x17\x89\x12\x8a\x0c\xba\x2a\x4a\x0c\x70\xfd\xde\xb6\x98\xe9\x85\x11\x97\x20\x5b\x25\x89\xdb\x05\x31\x2d\x5a\x43\x07\x3f\x7f\xba\xb4\xa4\x41\x24\x0d\x59\xf3\x87\xc7\x9b\xf7\x3e\xba\xa0\x64\xdf\xf2\xd2\x7d\xb5\x72\x2d\x67\x3f\xef\x23\xee\x73\xb0\x3d\x03\xa7\x25\x38\x99\x7b\x97\x04\xd5\xd5\x88\xcb\xa3\x16\xe2\x89\xf6\x2b\x8c\x6c\x75\x83\x17\xb1\xba\x89\xd7\xdd\xa3\xc7\xd3\x7e\x71\x82\xdc\x20\xeb\x64\x2c\x63\xc6\xe8\xdf\x17\x23\x13\xcd\xf2\x1f\x92\xc5\xf2\x24\x9b\xab\x14\x16\xde\x25\x57\xce\x89\x1e\x73\x09\xf0\x97\x60\x57\x92\x26\xfb\x21\xd6\x1f\xae\xa8\x1a\xcc\xe5\x37\xa2\xa2\xd5\x41\x60\xff\x03\x00\x00\xff\xff\x14\x67\x15\xfa\x83\x04\x00\x00")

func scriptsPreludeLuaBytes() ([]byte, error) {
	return bindataRead(
		_scriptsPreludeLua,
		"scripts/prelude.lua",
	)
}

func scriptsPreludeLua() (*asset, error) {
	bytes, err := scriptsPreludeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/prelude.lua", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/inspect.lua": scriptsInspectLua,
	"scripts/prelude.lua": scriptsPreludeLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"inspect.lua": &bintree{scriptsInspectLua, map[string]*bintree{}},
		"prelude.lua": &bintree{scriptsPreludeLua, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


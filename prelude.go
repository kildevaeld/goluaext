// Code generated by go-bindata.
// sources:
// prelude.lua
// DO NOT EDIT!

package goluaext

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _preludeLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x54\x41\x6e\xdb\x30\x10\xbc\xeb\x15\xd3\x53\x6c\x40\x12\xda\x43\x6e\x51\x2e\xbd\xf6\x07\x45\x61\xac\xa8\x55\xb4\x31\x45\x1a\x22\x15\xc5\x2d\xfa\xf7\x62\x29\xca\x51\xdc\x93\xe8\xe5\xcc\x70\x76\x77\xe0\xa2\xaa\x60\x2c\x85\x50\xdb\x99\xf4\xc7\x77\x3f\x5e\x28\x4a\x6b\x19\x8b\xc4\x01\x3f\x66\xc2\x63\xfd\x0d\x07\xe7\x23\x1e\xeb\xaf\xc7\xba\xe8\x67\x67\xa2\x78\xb7\x12\x0f\x2d\x05\x2e\x21\x4e\xe2\xb1\x00\x60\xbd\x21\x0b\x83\x06\x7f\xfe\x02\x40\x55\x81\xe0\x78\x59\xd1\x10\x17\x22\x39\xc3\x0a\x95\x1e\xaa\xaa\x54\x90\xeb\x10\xaf\x17\x4e\x72\x47\x34\x0d\x1e\xb6\x77\x1e\x10\x07\x76\x4a\x50\x8e\x82\x1b\x28\x2a\x57\xf4\x88\x06\x4e\xac\x16\xd8\x06\x96\xfe\x5e\x2a\x52\x6b\x79\xa7\x53\x55\xf0\xf3\xb4\xb7\x15\x40\x08\x03\x59\xeb\x17\x18\x7f\xb9\xc2\xf7\x0a\x5f\xd5\x13\xe6\x4b\x7e\xaf\xf7\x13\xa4\x7c\x83\x38\x5c\x48\xa6\x90\x9f\xe9\x7c\xbe\x07\x60\x7e\xca\x2f\x34\x78\xcb\x15\x76\x5d\x3e\x99\xfa\x94\xed\x6e\x0d\xe4\xbb\xaa\x4a\xaf\xad\x66\x16\xb1\x16\x2d\xa7\xca\xc8\x91\x92\xfb\xf4\x2e\x59\x0b\x89\x01\xbe\x7d\x65\x13\x43\x99\xa9\x69\x78\x03\x5f\x57\xa6\xf5\xfe\x8c\xf9\xa2\x15\x99\x54\x60\xf0\x9d\x0e\x1e\x12\xeb\x62\x35\x71\x12\xd7\xf1\x3b\x1a\x98\x22\x4b\xf0\xfb\xc5\x07\x06\xc1\x78\x17\xe2\x34\x9b\xe8\x27\x2c\x83\x98\x01\x86\x9c\xba\x31\x64\x2d\x77\x68\xaf\x78\x4a\x36\x1d\x8d\xfc\x7c\x78\xa2\xe9\x25\x3c\xef\x36\x3f\xc6\xb4\x7a\x2d\x8c\xb1\x3e\x9d\x94\x86\x06\xdb\x32\x0f\x89\x7b\x8a\xad\x2d\x51\xd7\xf5\x8e\xe8\xdb\xd7\x1b\x33\x70\xbc\x35\x7e\xf0\xed\x6b\x69\x8e\x39\x30\x69\xff\x77\x79\x48\x88\x4d\x4c\x03\x80\x7c\x59\x55\x18\xe9\xcc\x08\xf3\xa4\xd3\x24\x8d\xd9\x15\x21\xce\x7d\x8f\x7e\xf2\xe3\xdd\x86\x35\x05\xaa\x27\x64\xe5\x37\x77\xdb\xc2\xa5\x5f\x31\x3a\x65\x3d\xd4\xf7\x1e\x6e\xc5\x64\xe4\xd6\xd6\xc7\x76\xf3\x67\xe2\x38\x4f\x4e\x1b\xdd\x15\x4d\x9d\x23\xad\x9f\x5c\x08\x27\xda\x8f\x2c\xb0\xed\x4b\x9c\xd5\xe2\x26\x9c\x67\x8d\x06\x2f\xfb\x51\x29\x72\x83\x2c\x83\x58\xc6\x88\xce\xe3\x23\x99\xd2\x2b\xa9\x59\xc5\x52\x0f\x9b\xab\x38\xcd\xbc\x4b\xaa\xae\x0f\x0d\xc6\x35\xb0\xff\x05\x39\x93\x7a\xb2\x9f\x62\xfc\x69\x6f\xa6\xc4\xb8\xfe\x27\x64\xb4\x29\x14\x56\xfc\x0b\x00\x00\xff\xff\x67\x23\xc1\x41\x74\x04\x00\x00")

func preludeLuaBytes() ([]byte, error) {
	return bindataRead(
		_preludeLua,
		"prelude.lua",
	)
}

func preludeLua() (*asset, error) {
	bytes, err := preludeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prelude.lua", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prelude.lua": preludeLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"prelude.lua": &bintree{preludeLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// scripts/inspect.lua
// scripts/prelude.lua
// DO NOT EDIT!

package goluaext

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsInspectLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x3a\xed\x72\xdb\xba\x72\xff\xf5\x14\x3b\x4a\x53\x4a\xbd\xb4\x62\xdf\xf4\x63\x9a\x39\xca\x8c\x8e\x4d\xc7\x6c\x1c\xc9\x95\x94\xa4\x19\xd9\xf5\x40\x24\x28\xa2\xa2\x08\x1e\x00\x94\x8f\x9a\xf1\x7d\xa3\x3e\x45\x5f\xac\xb3\xf8\xe0\x87\x44\xbb\x73\xe7\x5c\xff\xb0\x8c\xc5\xee\x62\xbf\x77\x01\x39\xe3\x11\xc9\x80\xe5\xb2\xa0\x91\x82\xf1\xcf\x1e\xc0\xe3\xb7\x60\xbe\x08\x67\x53\x18\x83\x67\x37\x46\x59\x49\xe0\xfd\xe8\x62\x74\xee\xf9\x88\xf1\x75\x7e\x0b\xf8\x33\x06\x2f\x55\xaa\xf8\xf0\xee\xdd\x86\xa9\xb4\x5c\x8f\x22\xbe\x7b\xb7\x65\x5b\xa6\xf8\xbb\x06\xa9\x21\xba\x0a\x16\x97\xf3\xf0\x6e\x69\x59\xa7\xe5\x8e\xe4\x67\x82\x92\x98\xac\x33\x0a\x82\x16\x82\x4a\x9a\x2b\xa2\x18\xcf\x25\xf0\x04\x14\x6e\x48\x43\x7c\x1b\x5e\x06\xd3\x45\x00\x63\x58\xad\x7a\x78\xf4\x97\x70\x09\x16\xd8\xd3\x80\x4b\x5e\x1c\x04\xdb\xa4\x0a\x06\xd1\x10\xfe\x7c\x7e\xf1\x1e\x82\x5c\xb0\xdf\x4a\x0a\x9f\x88\x88\xfe\xf7\x7f\x08\x5c\x72\x45\x0c\xf2\x1d\x15\x3b\x26\x25\xe3\x39\x30\x09\x29\x15\x74\x7d\x80\x8d\x20\xb9\xa2\xb1\x0f\x89\xa0\x14\x05\x88\x52\x22\x36\xd4\x07\xc5\x81\xe4\x07\x28\xa8\x90\x3c\x07\xbe\x56\x84\xe5\x2c\xdf\x00\xd1\xbc\x22\x5e\x1c\xb4\xb8\x29\x93\x20\x79\xa2\x9e\x88\xa0\x40\xf2\x18\x88\x94\x3c\x62\x44\xd1\x18\x62\x1e\x95\x3b\xa7\x1d\x24\x2c\xa3\x12\x06\x2a\xa5\x9a\x43\x7f\x61\xa9\xfa\x43\x7d\x58\x4c\xb5\x4f\x40\xa5\x14\xdc\x16\x3c\x31\x95\xf2\x52\x81\xa0\x52\x09\x16\x21\x1f\x1f\x58\x1e\x65\x65\xcc\xf2\x8d\xe6\xe3\x50\x32\xb6\x63\xf6\x24\x64\xa1\xad\x22\x91\x71\x29\xa9\xaf\xe5\xf5\x61\xc7\x63\x96\xe0\x27\xd5\x2a\x16\xe5\x3a\x63\x32\xf5\x35\x9f\x98\xe1\x11\xeb\x52\x51\x1f\x24\x6e\x44\x34\x47\x4a\x92\xc7\xef\xb8\x00\x49\xb3\x0c\xb9\x30\x6a\xdc\xd4\x90\x52\xe3\x80\xe2\x9a\x4d\x81\x46\x56\xd6\x6c\xfa\xfc\xa7\x94\xef\xda\x5a\x31\x09\x49\x29\x72\x26\x53\x1a\x6b\xd5\x39\x48\xae\x4f\xfd\x2f\x0c\x48\xcb\x09\x49\x12\x9e\x65\xfc\x09\xcd\x1e\xf1\x3c\x66\x3a\x4a\x3e\x18\x6f\x2e\x53\x0a\x64\xcd\xf7\x54\xeb\x66\x82\x20\xe7\x8a\x45\xc6\x0d\xda\x31\x45\xed\x71\xbb\x25\x53\x92\x65\xb0\xa6\xd6\x88\x34\xd6\xbc\x58\x0e\xa4\xa1\x9e\x40\x51\xa4\x22\xb9\x62\x24\x83\x82\x8b\x3a\x3a\x1b\x6a\x8c\xac\x1c\x37\x01\x2c\x66\xd7\xcb\xef\x93\x79\x00\xe1\x02\xee\xe6\xb3\x6f\xe1\x55\x70\x05\xfd\xc9\x02\xc2\x45\xdf\x87\xef\xe1\xf2\x66\xf6\x75\x09\xdf\x27\xf3\xf9\x64\xba\xfc\x01\xb3\x6b\x98\x4c\x7f\xc0\xe7\x70\x7a\xe5\x43\xf0\x1f\x77\xf3\x60\xb1\xd0\xbc\x66\x73\x08\xbf\xdc\xdd\x86\xc1\x95\x0f\xe1\xf4\xf2\xf6\xeb\x55\x38\xfd\x04\xbf\x7e\x5d\xc2\x74\x86\x91\xff\x25\x5c\x06\x57\xb0\x9c\xe9\x43\x2d\xbb\x30\x58\xc0\xec\xda\xa4\x47\x30\xbf\xbc\x99\x4c\x97\x93\x5f\xc3\xdb\x70\xf9\xc3\x87\xeb\x70\x39\x0d\x16\x0b\xb8\x9e\xcd\x61\x02\x77\x93\xf9\x32\xbc\xfc\x7a\x3b\x99\xc3\xdd\xd7\xf9\xdd\x6c\x11\xc0\x64\x7a\x05\xd3\xd9\x34\x9c\x5e\xcf\xc3\xe9\xa7\xe0\x4b\x30\x5d\x8e\x34\xab\x70\x0a\xd3\x19\x04\xdf\x82\xe9\x12\x16\x37\x93\xdb\x5b\x7d\xe4\xe4\xeb\xf2\x66\x36\x5f\xa0\x9c\x97\xb3\xbb\x1f\xf3\xf0\xd3\xcd\x12\x6e\x66\xb7\x57\xc1\x7c\x01\xbf\x06\x70\x1b\x4e\x7e\xbd\x0d\xcc\x71\xd3\x1f\x26\x43\x6f\x27\xe1\x17\x1f\xae\x26\x5f\x26\x9f\x02\x4d\x39\x5b\xde\x04\x73\x8d\x6a\xa5\xfc\x7e\x13\x68\x50\x38\x85\xc9\x14\x26\x97\xba\x58\xcc\xae\xe1\x72\x36\x5d\xce\x27\x97\x4b\x13\x9f\xcb\xd9\x7c\x59\x91\x7f\x0f\x17\x81\x0f\x93\x79\xb8\x40\x03\x5d\xcf\x67\x5f\x7c\x40\x13\xcf\xae\xb5\x0d\xa7\x48\x3b\x0d\x0c\x27\x34\x3f\x4a\xaf\xb9\x54\x9e\x9a\xcd\xb5\x46\x5f\x17\x41\x2d\xd3\x55\x30\xb9\x0d\xa7\x9f\x16\xc8\xa0\xe9\x56\x34\xc9\xc3\x43\xef\xb9\xd7\x33\x95\x53\x71\x4c\x95\x7c\x03\xe3\xea\xcf\x5e\xcf\x95\xbe\xcf\xc1\x0f\x00\x5b\x28\x25\x55\x3b\xaa\x88\xae\x69\x83\x9f\xcf\x3e\xfc\x7c\x7c\x6c\x10\x27\x65\xae\x53\x7a\x30\x04\x41\x55\x29\xf2\xba\xf6\x7e\x0e\x7e\x78\x40\xf3\xf8\x79\x58\x31\xfe\x12\x2c\x27\x4b\x6d\xdf\x3f\xc2\xb8\xe2\xe2\xd8\xf7\xce\xce\x60\x52\x20\x2d\x2f\x52\xf6\xdf\x54\xea\x20\xb7\xac\x58\x02\x4c\x41\x4a\x24\xfc\x56\x72\x45\xa5\x0f\xeb\x52\xa7\x19\x90\x22\xb5\x34\x54\x22\x8b\x99\x4a\xa9\x78\x62\x58\x31\x98\xb2\xa7\x4a\x20\x20\xe8\xa6\xcc\x88\x30\xf4\xb1\xe5\x6b\xed\xe8\xc4\x04\xb9\x23\x42\xfd\x3b\x62\x0c\xa4\x12\xc3\x1e\xe0\xc1\x52\x89\x0f\x3b\xa2\xa2\x74\xe0\xf5\xbd\xa1\x4e\x6a\x3c\xb8\x06\xf7\xbd\xfe\x10\x85\xcd\xb5\x67\xad\xa2\x7d\xaf\x0f\xa3\x11\x62\xe1\x47\xdf\xeb\xf7\x00\x15\xed\x55\x08\x5e\xdf\xb3\x08\x1f\x36\xb2\x5c\x23\x73\x1f\xbc\xfb\x7b\x3c\x63\x34\xc2\xed\x1e\xe2\xa3\x4e\xf7\x04\xc6\x1f\x71\x8f\x78\x3e\xdc\x9f\xdb\xc5\xb9\xe7\xc3\xfb\x0b\xb3\x78\x7f\xe1\x59\x5d\x64\xca\x85\xba\xe4\xb9\x12\x3c\xbb\x4c\x89\x08\x64\x44\x0a\x2a\x61\x0c\xd8\x5e\x57\xfd\x7b\xd2\x7f\x80\x31\xf4\xef\xef\x49\xdf\xd7\x80\xb5\x03\xac\xfb\x3e\xae\x13\xb7\x4e\xcc\x3a\x77\xeb\xbc\xef\x1b\x16\xc2\x41\x84\x65\xa1\x1c\x40\x19\x92\xbd\x5b\xef\xfb\xbd\x67\x2b\x58\xc6\xf3\x4d\xb7\x5c\xcf\x50\xe9\x98\xb3\xcc\x69\x78\x7f\x7e\x7e\xee\x14\xbc\x3f\x7f\x7f\xd1\x4b\xb8\x00\x36\x36\xb0\x18\x4b\xb3\xe1\x1b\xa5\x18\x87\xda\x9d\x23\xec\x99\x03\x66\xfd\xa6\x9d\xd4\x6d\x8d\x55\x94\x3e\xd4\x1e\x7b\x0d\x49\x6b\xd1\x1f\x8d\x98\xc6\xec\xd6\x41\x23\xd6\x42\x24\x5c\xec\x88\x1a\xf4\xef\xef\xdf\x9e\xbf\x8f\xfb\x3e\x68\x81\xd0\x97\xda\x9f\x47\x21\x47\x35\x0f\x17\x6e\x36\x36\x06\x55\x54\xe0\xe9\x3e\xca\x70\x7f\xdf\x1f\xf6\xa0\xf9\x63\x11\x06\x6f\xa3\xe1\xdb\x64\x75\x7e\xf6\xaf\x0f\x7d\xff\x05\x09\xbb\x29\xdf\x46\x7d\xff\x25\xe5\x87\xc3\x4e\x69\x99\x0c\x63\x9a\x2b\x96\x30\x2a\x8e\x64\x56\x07\xab\x06\x8c\xc7\xe0\x19\x5b\x78\x3a\x5b\xea\x4c\x81\xfe\x7f\xae\x1e\xdf\x92\x07\xfc\xf5\x36\x7e\xf8\x87\xbf\xeb\xc3\x4b\xe7\x2c\xe8\x6f\x25\xcd\x23\xfa\x99\x1e\x06\x5b\x1f\xa4\x5d\xde\xd2\x7c\xa3\xd2\xe3\x63\xb7\xe6\xd0\xbc\xdc\xad\xa9\xf0\x8c\xb2\x78\xf2\x05\xfc\x32\x86\x6d\xbd\xde\xe2\xba\xcd\xaa\xde\xdc\x11\x95\x8e\x92\x8c\x73\x61\xf9\x6d\x9b\xa2\xc5\x34\x21\x65\xa6\x96\x87\x82\xce\x44\x4c\x45\x95\x51\xee\xd4\x07\x5d\x69\x2f\x7c\x58\x79\x6b\xce\x33\x4a\x72\x4f\x47\xc5\x9f\x11\x62\xcd\x81\xf1\xf4\x1e\xd7\xba\x60\xea\xe5\x3f\xea\x9c\xf2\x9c\xe6\x1a\xf6\x4f\x88\x52\x4a\x2a\x62\xa2\x88\x86\xfc\xb3\x26\x4a\x71\x60\xd5\xeb\x7f\xa9\x9b\x40\x5d\xbc\xb8\x50\x9f\xe9\x41\x0e\x88\x0f\xeb\x61\x95\x1f\x8a\xf8\xa0\xd6\xd8\x22\xd0\x52\x04\x87\x3c\xfc\x63\x3d\xc4\xb1\xe1\xec\xcc\x46\xad\x34\x75\x4d\xab\x22\x01\x87\x23\x64\x47\x35\x88\x0a\x16\x91\x2c\x3b\xbc\x23\x59\x91\x92\x35\x55\x66\x69\xb2\x4c\x11\x34\x95\x5a\x6b\xfa\x81\x59\x55\xde\xe7\xc2\xee\x3b\x23\x99\x3a\xe9\x7c\x47\xe0\x17\x58\xeb\xcc\xa8\xa4\x8d\x51\xdc\x58\xcb\x7b\x62\xf1\x95\x22\x0f\x7e\x17\x78\xfd\x60\x54\x59\x3e\x71\xb7\xad\x95\x34\x8a\x44\x7c\x57\x10\x41\x63\x20\x51\xc4\x05\xce\xab\x38\xeb\x61\x73\x39\xf5\xa9\xf6\x8b\x51\x2c\x56\x44\xeb\x84\xc2\x34\x85\xee\x14\x0b\x7e\x79\x51\x2e\x9a\x49\x6a\xd9\xd9\x69\xb2\x62\xa5\x44\x49\xb5\xe0\x6d\xa1\xd7\x34\xe1\x28\x77\x29\x15\xdf\x01\xcf\xa9\x6c\xb2\x59\x9f\xb0\x49\x48\x26\x29\xb2\xb1\x14\x56\xf5\x44\x51\x51\x71\x76\x5c\x8c\xad\x4f\x70\x6b\x7f\xe3\x08\x7f\xe2\x67\x27\x2f\x3a\x4c\xad\xab\xbe\x74\x8d\x15\x79\x57\x64\xb4\xbe\x5c\x08\x4a\x70\xde\xf6\xb5\x7d\xd7\x34\x25\x7b\xc6\x05\x4e\xac\x82\x3c\x65\x34\x87\xbf\x87\x37\x38\x76\xf7\xcb\x3c\xa6\x09\xcb\x69\xdc\x87\x27\xac\xc3\x67\x67\xf6\xc6\x85\xb2\xe4\x9e\x82\xa2\x44\x99\x6c\xaa\xca\x11\x2c\x38\x3c\xd1\xfa\x34\xe0\xa5\x00\xfe\x94\xc3\x1b\xe0\x05\x15\x44\x71\x31\x3a\x4e\x88\x0d\x55\x8b\x56\xae\x0f\x54\x9d\x16\x28\xcc\x18\x2e\xaa\xf5\x1e\xc6\x28\xe3\x86\xaa\x81\xf2\x33\x9a\x23\xe6\x53\xca\x32\x0a\x7b\xf8\xcb\x18\x1b\x93\x69\x3a\x60\x29\xf1\xf7\x9f\x34\x3d\x74\xd2\xb6\x7a\x3d\x22\x9f\xc1\x45\x67\xa9\xdb\x50\x35\xe5\xb9\x11\x14\xe7\x7c\x9d\xc2\x0d\x41\xb7\xf4\x60\xba\x64\x05\x69\x17\x30\x18\xbf\xa4\x28\x36\xcc\xad\xff\x88\xb7\x8a\x82\x30\x81\x5c\x9d\x0e\xb6\x3d\xfe\x7f\x65\xd6\x84\x99\x76\xcc\x88\xe5\x92\x0a\x35\x40\x71\x7c\xd8\x0e\xad\x82\xe6\xb7\xc1\xc0\x08\xb2\xfb\xae\x16\x35\x0a\xb5\xdd\x68\x17\xdf\x17\x0c\xb2\xe4\x0b\x5d\x41\xe6\x54\x96\x99\x5a\x90\x84\x66\x87\x81\xf2\x61\xd7\xb0\x4b\x6b\xd0\xd4\x25\x6d\xa7\x4c\x1b\x30\xc5\x55\x27\xaf\xf5\xca\x4e\xf9\xe0\xd5\x04\x5e\xcd\x45\x2a\xe1\x03\xdf\xda\x5a\x86\x5c\x6a\x34\xc3\xad\xaa\xcc\xf5\xc0\xc0\xd1\x52\x4a\xc0\x18\x0a\xcc\x90\x06\x89\x0f\xca\xf4\x5a\xb3\xcd\xb7\xae\x01\x62\x29\xf4\xa8\x10\x5c\x7c\x00\x3d\xf7\x39\x0a\xd7\x45\x8d\x21\x9d\x10\x9d\x7d\xf4\x0d\xf2\xf9\x08\xe7\xad\xe4\x47\xd8\x4b\xb3\x45\xc4\xcb\x5c\x2d\xd1\x1a\x93\xa2\xa0\x44\x10\x4c\x25\xb4\xa3\x3a\x82\x0d\x9d\x0f\x1b\x30\xb4\xea\x31\x88\x0b\x8c\xc3\x86\x9c\x6d\x8b\x57\x06\xb2\xe1\x75\x4c\xbf\x52\x8d\xa9\xeb\xf4\x44\xdc\x1e\xdb\x94\x72\xd1\xbb\xef\x8a\x5e\xf3\xf0\xd1\xa5\xdb\xb6\x5b\xb7\xd7\x48\xf6\x2f\x93\x18\x9f\xbc\x4c\xba\x69\xde\x7e\xd4\xf0\x25\x46\x58\xba\x5f\x55\xb9\x0b\xea\x6a\x4b\x9d\x66\xcd\x3a\xdc\xc6\x6f\x3a\x3f\xe2\xc5\xc1\x25\x75\xf3\x06\x26\xeb\x98\x37\x6f\x30\xa6\x8c\xe1\x9d\xed\x8d\xb4\xc5\x82\x8d\x2f\x0c\x3c\xe6\x1a\x69\xc5\x50\x3a\x89\x1f\xad\x72\x56\x31\xe8\x8c\xba\x1d\xd9\xd2\x3b\xa2\xd2\x41\x41\x54\xea\xc3\x68\x34\x3a\x2d\x66\xa3\xd1\xa8\xae\x67\x39\x7d\xba\xd3\xa8\x46\xa4\xa6\x06\x9a\xc7\xb0\x29\xde\x1b\xcd\xc2\x06\x82\xa5\x5c\x99\x62\xac\xa5\xc5\xed\x15\x7b\x38\xae\xc0\x16\xb3\x53\xe0\x42\xf0\x88\x4a\x39\xa7\x51\x29\x24\xdb\xd3\x81\x05\xe0\x0d\x92\xee\x7c\x30\x7a\xec\x99\x64\x8a\xc6\xc3\x9e\x8b\x70\xdc\xc4\xe8\xc7\xd6\xd0\xcc\x48\x5c\xbb\xc8\x61\x89\xa3\x5b\x21\xfa\x43\x0b\xb1\xbd\x63\x5d\xec\x8c\x62\x65\xa0\x31\x56\x19\xf3\xf7\xa0\x16\x67\xe8\xb8\xeb\x2c\xac\x70\xbb\xb3\xf1\x84\xe5\x25\x2f\x0e\xae\xa5\xe8\xfe\xd5\x12\x64\xdc\x46\xec\x66\xf1\x99\x1e\x7a\x2f\x25\x6a\x43\x9c\x46\xc2\x36\x49\xeb\x33\x3a\x8c\xbe\xf5\x8f\x43\x68\xeb\x43\xe3\x3d\x62\xd8\xf0\x85\x63\xce\x92\x36\xff\xbf\xd4\x6e\x69\x5c\x7d\x5a\x7a\xad\x9a\x04\x0f\xaf\x4a\xb4\x3f\x91\xa8\x49\xdb\x25\x4f\x5d\x39\x2a\xb7\x3a\x13\xee\x14\xbc\x7a\x58\xab\xa8\xd4\xa6\x3c\x11\xe1\xe4\x21\xe5\x54\x0e\xd9\xc9\xea\xd2\x3c\xc1\x2a\x87\xd5\x11\x69\x0d\xcf\x3b\x4d\x6c\xcc\x56\x08\x26\x93\x70\x0c\xfc\xc3\x3f\x2e\x21\x43\xa3\x11\x17\x26\x36\x8f\x80\x8f\x3b\x85\xf0\xc7\x47\x96\xc7\xf4\x77\x18\xd7\x3b\xcf\xbd\x5e\x95\xcb\x15\xf0\x43\x51\x2a\x39\x68\x15\x1f\x22\x36\x52\x5f\xd2\xda\xe5\x67\x5d\x26\x09\x15\xfa\x31\x2b\x4b\x46\x66\xd5\x1a\x13\x35\xcd\x9b\x6a\xa3\x2e\x45\x9a\xe1\x8b\x53\xa1\x21\xc0\xda\x84\xd1\x85\xb8\x75\x5d\xd2\xc6\xeb\x10\x3a\xe6\x4f\xf9\x20\x41\x91\xb5\x30\x19\xdd\xd3\xcc\x49\x66\x16\x86\x7b\x32\x78\x0d\xa7\x1a\x35\x3b\x4e\x50\x64\xcd\x92\x43\x45\x6e\xcc\xa4\x69\x73\xfa\x94\xb1\x9c\xfa\xee\x1d\x43\xd0\xc2\x6c\xa0\xc1\x73\xe5\x37\x4e\x70\xaf\x03\x1d\xfc\x49\x86\x97\xd4\xc3\x37\x13\x89\x83\x7d\x63\x02\x34\xcc\x62\xb9\xda\x3f\xd8\x04\x7d\x91\xcb\x86\xaa\xd0\x12\xdb\x2f\x89\x62\xa7\xa2\x61\x50\x3f\xf1\xb0\xb8\x4e\x73\x7b\xe3\xdd\xbb\x89\x70\x6f\xeb\x64\xdc\x7a\xfe\x80\x31\x18\xc5\x76\xe4\xf7\x30\x96\x2b\xb5\x7f\xc0\xc9\xe6\x7c\x58\xb9\xee\x78\x77\x0c\x2c\xae\x37\xac\x0a\x86\x13\x8b\x8f\x5b\x4d\x35\xd9\xb1\xf8\x65\x33\x15\xa5\xd2\x23\xb7\x7d\xab\x6a\xbd\xab\x6c\xdb\xb7\xe4\xda\x4d\xd5\xd4\x5d\x83\xfa\xab\x7e\xd3\x95\xdf\x48\x56\x52\xc3\xb5\x81\xf3\xd0\x7f\x55\x90\xa5\x9d\x5f\xec\x5c\x87\x3d\xa4\xf9\x88\x8c\x97\xf8\x26\xac\x7e\xff\xad\x5f\xd0\xaa\xb3\x2a\xe5\xd5\x70\x58\xdf\x5a\xf5\xfe\x51\x64\xa8\x61\x17\xbd\xf7\x8b\xae\x56\xe0\x99\x70\xb3\x81\x80\xb3\x95\xf7\xd1\x3b\xe2\x68\xa3\xfd\xa3\x0d\x8c\x98\x16\x2a\xed\xe4\xa9\xf3\xbd\xa2\x76\xad\x53\x13\x75\x8d\x5e\x1f\xe1\xc2\x38\xa0\x29\x56\xb7\x40\xc7\x5d\x3b\x3f\xbe\xc9\x1d\xdf\x78\xcc\x6d\xed\x85\x0b\x5f\xb3\x45\x1c\x47\xec\xd1\xac\xd9\x0c\xf7\xd6\x65\xa9\xc2\x7e\xed\x0e\x75\x62\x20\x6f\x58\x83\x4c\x0d\xaa\x5e\xee\x7b\x55\x87\x3d\x3a\xa8\xd5\x5c\x1b\xcc\xe0\xec\x0c\xdd\x67\x1f\x36\xdb\x44\xc3\x56\xcb\x3e\x32\xcd\xc7\x71\xcb\xf0\xae\x52\xbd\xd6\x4c\xf5\x5c\x0e\x63\x38\x6f\xcc\x22\xba\x36\x1f\xb1\x6e\xcc\x21\x2c\xb1\x54\xd5\x4d\xaa\x21\xbb\xef\x35\x8f\x6b\xab\xe5\x0d\x4f\xc0\x26\xdd\xd4\x8a\x3d\x1c\xdd\x32\xf4\x18\x8b\x9f\x7f\xaa\xee\x33\x0d\xd9\x51\xca\x47\x7f\x8b\x13\x13\x33\x23\xd3\x49\xdc\x0c\xff\x98\xc8\x8d\x2a\xdf\x96\xb8\x2a\x3a\xa7\xfa\x8d\x5f\xd3\x70\xfb\xd7\x69\xc8\x12\x0c\xe2\x56\x84\xfc\x0d\x95\xc0\x7c\xac\x92\xe1\xe3\x6b\x82\xd7\x53\x8e\xe3\x4e\xf3\xc6\x08\xff\xe6\xc4\xee\x5a\x3a\x2e\x9c\xf4\x18\xcb\xc2\x84\x3b\x93\xb0\x2b\x33\xc5\xce\xb0\x49\xc6\x23\xf8\xb7\x52\x2a\x96\x1c\x20\xca\xb8\x64\xf9\x06\x9e\x7b\x2f\x89\x5e\x95\xac\x76\xb4\x3b\x33\x9c\x9d\x01\x11\x82\x1c\xdc\x03\x58\x4a\xf6\x14\x78\x4e\x81\xfe\xae\x04\x01\x59\x90\x88\x56\x6f\x82\x5d\x87\xb5\xe3\xb3\xf2\x42\x63\xcf\x16\xbf\x57\x06\x8f\xca\x62\x8d\x9e\xdb\xea\xa3\xb6\x39\xec\x5b\xaf\x12\x1d\xc5\xb6\xf1\x15\x9a\xad\x00\xfb\x61\xb3\x15\x58\x0e\xf6\x3d\x58\x37\x17\x03\x71\x8f\xe6\x0d\x50\xce\xb2\xce\x33\xaa\x26\xb3\xef\xe0\x7c\x7c\xfb\x71\x64\xa6\xcb\xed\x5b\x5d\xa0\x5d\xe0\xd5\xde\xf7\xc0\xf3\x1b\x65\x7e\x3f\xf4\x5d\xdb\x71\xb6\xfb\x9b\xcc\xbb\xf5\xf7\x1c\xb6\xa7\xda\xcf\x81\xe0\x5c\xf9\xc0\x0b\xfd\x45\x3f\x9e\x6b\xff\xb4\xc1\x3d\xae\xd6\xd5\x4b\x8c\xfb\x76\x02\x7b\x5f\x03\x61\xe4\x20\x18\xcb\x44\xa5\xa3\xb4\xdc\xd0\xe6\x8d\x1b\xa3\xb8\x81\xee\x20\x5c\x80\x77\x9f\x7b\xf5\xdc\xa5\x67\xbf\x26\x63\x07\x41\x4c\x80\x1a\xd3\xde\x0c\x1a\x98\x16\x62\x43\xc7\xed\xd7\x5f\x94\x72\xae\x5e\xbd\x09\x19\x63\xe8\x6f\x95\x9f\x87\xf5\x23\x48\xeb\xbf\x86\xb8\x38\xf9\x16\xda\xfc\x17\x89\x55\xbf\xfa\x19\x1b\x90\x6f\x87\x75\x1c\x1c\x5a\xbb\xe7\x7e\x63\x68\x6f\xed\xfc\x7c\xf6\xed\x14\x29\x01\xa0\x73\xcb\x8c\x8a\x9d\x5b\xce\xb0\x8d\x2d\x37\x68\xdb\x7f\xf9\x30\xe6\x6c\xec\xdb\x79\xdb\xfc\xf3\xc9\xe9\xab\x5c\xf7\x5b\x14\x1a\x0b\x8d\xf4\xec\xb7\xae\x4c\x26\x71\x4f\xd3\xdc\xa0\x1f\x3d\x29\x8d\x22\x9e\x47\x44\x0d\x2a\x7c\x7b\x1b\xb2\xd3\x63\xcb\xcc\x16\xc7\x87\x9f\xf0\xf8\x18\x91\x2c\x6b\x3e\x36\x3d\x9a\x67\x1f\xc7\xfc\x38\xca\xf5\x1e\xcd\x63\x78\x1e\xf6\x7a\x6d\x9c\xde\xff\x05\x00\x00\xff\xff\x26\xe9\xf4\xfc\x14\x26\x00\x00")

func scriptsInspectLuaBytes() ([]byte, error) {
	return bindataRead(
		_scriptsInspectLua,
		"scripts/inspect.lua",
	)
}

func scriptsInspectLua() (*asset, error) {
	bytes, err := scriptsInspectLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/inspect.lua", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _scriptsPreludeLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x54\xc1\x4e\xdc\x30\x10\xbd\xef\x57\x3c\x4e\x2c\x52\x12\xb5\x07\x6e\x84\x4b\xaf\xfd\x83\xaa\x5a\x4d\x9c\x31\x31\x38\xf6\xca\x76\x08\xdb\xaa\xff\x5e\x8d\xed\x2c\x01\x4e\x09\x93\xf7\xde\xbc\x99\x79\xec\xa1\x6d\xa1\x2c\xc5\xd8\xd9\x85\xe4\x8f\x1f\x7e\x3e\x53\x32\x83\x65\xac\x26\x4d\xf8\xb9\x10\xee\xbb\xef\x38\x3a\x9f\x70\xdf\x7d\xbb\xeb\x0e\x7a\x71\x2a\x19\xef\x0a\xf1\x38\x50\xe4\x06\xc6\x99\x74\x77\x00\x60\xbd\x22\x0b\x85\x1e\x7f\xff\x01\x40\xdb\x82\xe0\x78\x2d\x68\x18\x17\x13\x39\xc5\x02\x35\x1a\xa2\x2a\x54\x90\x1b\x91\x2e\x67\xce\x72\x77\xe8\x7b\xdc\x6e\x7d\x6e\x91\x26\x76\x42\x10\x8e\x80\x7b\x08\xaa\x56\xe4\x15\x3d\x9c\xb1\x52\x60\x1b\xd9\xe8\xcf\x52\x89\x06\xcb\x3b\x9d\xb6\x85\x5f\xc2\xde\x56\x04\x21\x4e\x64\xad\x5f\xa1\xfc\xf9\x02\xaf\x05\x5e\xd4\x33\xe6\xa6\xf6\xd3\x3e\xc0\x34\xaf\x30\x0e\x67\x32\x21\xd6\x36\xa3\xaf\xdf\x01\xa8\x5f\xe6\x37\x7a\xbc\xd6\x0a\xbb\xb1\xbe\xa9\xee\x54\xed\x6e\x03\xd4\x6f\x6d\x9b\xbb\x15\x33\xab\xb1\x16\x03\xe7\xca\xcc\x89\xb2\xfb\xdc\x97\xac\x85\x49\x11\x7e\x78\x66\x95\x62\x53\xa9\x79\x79\x13\x5f\x0a\xd3\x7a\xff\x82\xe5\x2c\x15\x13\x44\x60\xf2\xa3\x2c\x1e\x26\x75\x87\x62\xe2\x64\xdc\xc8\x6f\xe8\xa1\x0e\x55\x82\xdf\xce\x3e\x32\x08\xca\xbb\x98\xc2\xa2\x92\x0f\x58\x27\xa3\x26\x28\x72\xe2\x46\x91\xb5\x3c\x62\xb8\xe0\x21\xdb\x74\x34\xf3\xe3\xf1\x81\xc2\x53\x7c\xdc\x5d\x7e\x4e\xf9\xf4\x52\x98\x53\x77\x3a\x09\x0d\x3d\xb6\x63\x1e\x33\xf7\x94\x06\xdb\xa0\xeb\xba\x4c\xac\x4c\x3f\x3c\x5f\xa9\x88\x9c\xae\xa3\x1f\xfd\xf0\xdc\xa8\x02\x35\xba\x44\x60\x17\x89\x12\x8a\x0c\xba\x2a\x4a\x0c\x70\xfd\xde\xb6\x98\xe9\x85\x11\x97\x20\x5b\x25\x89\xdb\x05\x31\x2d\x5a\x43\x07\x3f\x7f\xba\xb4\xa4\x41\x24\x0d\x59\xf3\x87\xc7\x9b\xf7\x3e\xba\xa0\x64\xdf\xf2\xd2\x7d\xb5\x72\x2d\x67\x3f\xef\x23\xee\x73\xb0\x3d\x03\xa7\x25\x38\x99\x7b\x97\x04\xd5\xd5\x88\xcb\xa3\x16\xe2\x89\xf6\x2b\x8c\x6c\x75\x83\x17\xb1\xba\x89\xd7\xdd\xa3\xc7\xd3\x7e\x71\x82\xdc\x20\xeb\x64\x2c\x63\xc6\xe8\xdf\x17\x23\x13\xcd\xf2\x1f\x92\xc5\xf2\x24\x9b\xab\x14\x16\xde\x25\x57\xce\x89\x1e\x73\x09\xf0\x97\x60\x57\x92\x26\xfb\x21\xd6\x1f\xae\xa8\x1a\xcc\xe5\x37\xa2\xa2\xd5\x41\x60\xff\x03\x00\x00\xff\xff\x14\x67\x15\xfa\x83\x04\x00\x00")

func scriptsPreludeLuaBytes() ([]byte, error) {
	return bindataRead(
		_scriptsPreludeLua,
		"scripts/prelude.lua",
	)
}

func scriptsPreludeLua() (*asset, error) {
	bytes, err := scriptsPreludeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/prelude.lua", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/inspect.lua": scriptsInspectLua,
	"scripts/prelude.lua": scriptsPreludeLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"inspect.lua": &bintree{scriptsInspectLua, map[string]*bintree{}},
		"prelude.lua": &bintree{scriptsPreludeLua, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


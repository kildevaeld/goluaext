// Code generated by go-bindata.
// sources:
// prelude.lua
// DO NOT EDIT!

package goluaext

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _preludeLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x54\xc1\x72\x9b\x30\x10\x3d\xc3\x57\xbc\xfa\x12\x98\x02\x93\x1c\x72\x8b\x72\xe9\xb5\x7f\xe0\x7a\x3c\x42\x88\xa0\x58\x48\x0c\x12\x38\x6e\x26\xff\xde\x59\x21\x6c\xe2\x1e\x12\xe4\xd5\xbe\xa7\xb7\xbb\x4f\x4a\xcb\x12\x42\x73\xe7\x2a\x3d\x71\xfa\xf1\xcb\xf6\x03\xf7\xaa\xd6\x12\x67\xe5\x3b\xfc\x9e\x38\x9e\xab\x27\x64\xc6\x7a\x3c\x57\x8f\x79\x95\xb6\x93\x11\x5e\x59\xb3\x00\xb3\x9a\x3b\x59\x40\x19\xe5\xf3\x14\x80\xb6\x82\x6b\x08\x30\x7c\x7e\x01\x40\x59\x82\xc3\xc8\xf3\x92\x0d\x65\x9c\xe7\x46\x48\x4a\x55\x2d\x88\x95\xa0\xe0\xa6\x81\xbf\x0c\x32\xd0\xe5\x60\x0c\x0f\xeb\x39\x0f\xf0\x9d\x34\x04\x20\x0c\x25\x33\x50\x56\x8c\xd0\x12\x0c\x46\x69\x0a\x48\xed\xa4\x6a\xef\xa9\x3c\xaf\xb5\xdc\xf0\x94\x25\xec\x34\x6e\x65\x39\x70\xb8\x8e\x6b\x6d\xcf\x10\x76\xb8\xc0\xb6\x94\xbe\xb0\x87\x9c\x1f\xf1\xbc\xd6\x8e\x50\xc5\x0c\x65\x30\x70\x35\xba\x78\x4c\x63\xe3\x3e\x00\xb1\x57\x07\x30\xcc\x31\x22\x4d\x13\x57\xa2\x3a\x46\xb9\x6b\x01\x71\xaf\x2c\xc3\x69\x8b\x98\xb3\xd2\x1a\xb5\x0c\x91\x5e\x7a\x1e\xd4\x87\x73\xb9\xd6\x50\xde\xc1\xd6\xef\x52\x78\x57\x44\x68\x68\x5e\x27\x2f\x0b\x52\x5b\x7b\xc2\x34\x50\x44\x8d\x44\xd0\xd9\x86\x1a\x0f\xe5\xab\x74\x11\x71\x54\xa6\x91\x1f\x60\x10\x69\xa4\x90\x1f\x83\x75\x12\x1c\xc2\x1a\xe7\xc7\x49\x78\x3b\xe2\xdc\x29\xd1\x41\x70\x43\x6a\x04\xd7\x5a\x36\xa8\x2f\x78\x09\x32\x0d\xef\xe5\x6b\xf6\xc2\xc7\x37\xf7\xba\x99\x7c\xef\xc3\xe8\x29\xd0\xfb\xea\x78\x24\x18\x18\xd6\x61\x66\x01\x7b\xf4\xb5\x2e\x50\x55\xd5\x06\x68\xeb\xf7\x2b\xd2\x49\x7f\x2d\x3c\xb3\xf5\x7b\x21\xf2\x68\x98\x30\xff\x3b\x3f\x84\x8c\x95\x8c\x0c\x80\xb8\x59\x96\xe8\xf9\x49\xc2\x4d\x23\x75\x93\x93\xcd\x2e\x70\x7e\x6a\x5b\xb4\xa3\xed\xef\x26\x4c\x2e\x20\x3e\xc5\xb5\xfa\x2b\x9b\x75\xe0\xaa\x5d\x72\xa8\xcb\xb4\xa8\xee\x35\x5c\x83\x41\xc8\xb5\xac\xdb\x74\xe3\x67\x94\x7e\x1a\x0d\x15\xba\x09\x8a\x2a\x5a\x9a\x3e\x31\xe0\x8e\x7c\xdb\x32\x27\x75\x5b\xe0\x44\x12\x57\xe2\xd8\x6b\x30\xbc\x6d\x5b\x45\x99\x6b\xca\xb9\x53\x5a\xa2\x47\x63\x71\x73\xa6\x6a\x09\xc4\x16\xb2\x50\xc3\xaa\xca\x8f\x93\xdc\x38\x95\xc6\x07\x86\x7e\x31\xec\x7f\x46\x8e\xa0\x96\xeb\x6f\x36\xfe\x36\x37\x51\xa0\x5f\xde\x84\x98\x2d\x52\x4a\xa3\x57\xe6\x4d\xdb\x9a\xeb\xeb\xa3\xe3\x3a\x7b\x0e\xde\x5e\xe2\x98\xf9\xa8\x88\xc2\xa5\xe9\x52\xa8\x93\xd2\xb0\xcf\xaf\xf4\xf6\xf6\x34\x53\x3f\x64\xbe\x50\x79\x9a\xd0\xe6\xde\x1f\x18\x55\x90\x26\x11\x40\xd9\x71\x6d\xd8\x63\x9a\xd0\xed\x39\xdd\xee\xac\x0f\x17\x36\x49\x0c\x33\x3f\x9f\xe0\xf6\xe6\xc0\x4e\x69\x42\xf2\x92\x20\xbe\x72\x76\xf4\x99\xcb\x23\x70\xb9\xee\x6a\xc1\xba\x88\x1d\x46\x65\x7c\xa6\x8a\x39\x4f\x93\x64\x66\x7e\x3f\x1f\xd2\x24\x59\x1f\x9f\x39\x67\x6c\x17\xb8\x76\xc1\x39\xf4\xd2\x05\xa5\xf3\x61\xf1\x4e\x92\x24\xa1\x88\xb9\x50\x55\xb5\xfb\xe3\x77\x44\x13\x14\xd0\x3f\xfa\xfb\x17\x00\x00\xff\xff\x95\x80\xc3\x80\x9d\x05\x00\x00")

func preludeLuaBytes() ([]byte, error) {
	return bindataRead(
		_preludeLua,
		"prelude.lua",
	)
}

func preludeLua() (*asset, error) {
	bytes, err := preludeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prelude.lua", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"prelude.lua": preludeLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"prelude.lua": &bintree{preludeLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

